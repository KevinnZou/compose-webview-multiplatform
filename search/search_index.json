{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Compose Multiplatform WebView","text":"<p>This library provide a WebView widget for JetBrains Compose Multiplatform.</p> <p></p> <p>Note This library is built using the compose multiplatform library template. It supports automatic package publishing, documentation, and code style checking.</p> <p>This library can be considered as the Multiplatform version of Accompanist Web library. It provides the basic WebView functionalities for JetBrains Compose Multiplatform, which supports loading URLs, HTML, and post data. </p> <p>Currently, it supports the platforms of Android, iOS, and Desktop.</p>"},{"location":"#android","title":"Android","text":"<p>The Android implementation of this library relies on the web module from the Accompanist Library.</p> <p>Note: it has been deprecated in version 0.33.1-alpha. Thus I created a fork of it and used it as the base for this library.  If you just want to use the WebView in Jetpack Compose, please visit this repo: https://github.com/KevinnZou/compose-webview.</p>"},{"location":"#ios","title":"iOS","text":"<p>The iOS implementation of this library relies on WKWebView.</p>"},{"location":"#desktop","title":"Desktop","text":"<p>The Desktop implementation of this library relies on JavaFX WebView for version &lt;= 1.2.0.</p> <p>Thanks to @DATL4G, starting from version 1.3.0, we switched to Java CEF Browser for better performance.</p> <p>Starting from version 1.7.0, we switched from Java CEF Browser to Kotlin CEF Browser for more features and better performance.</p> <p>Note: After switching to KCEF, developers need to configure it for the desktop app. Please see the README.desktop.md for more details.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 Kevin Zou\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"communication/","title":"Communication between WebView and Native","text":""},{"location":"communication/#native-to-webview","title":"Native to WebView","text":"<p>Starting from version 1.2.0, this library provides the <code>evaluateJavaScript</code> method to allow developers to send messages from the Native to WebView.</p> <pre><code>/**\n * Evaluates the given JavaScript in the context of the currently displayed page.\n *\n * @param script The JavaScript to evaluate.\n * @param callback A callback to be invoked when the script execution completes.\n */\nfun evaluateJavaScript(\n    script: String,\n    callback: ((String) -&gt; Unit)? = null,\n)\n</code></pre> <p>Developers can use it like that:</p> <pre><code>val state = rememberWebViewState(\"https://example.com\")\nval webViewNavigator = rememberWebViewNavigator()\nMaterialTheme {\n    Box(Modifier.fillMaxSize()) {\n        WebView(\n            state = webViewState,\n            modifier = Modifier.fillMaxSize(),\n            captureBackPresses = false,\n            navigator = webViewNavigator,\n            webViewJsBridge = jsBridge,\n        )\n        Button(\n            onClick = {\n                webViewNavigator.evaluateJavaScript(\n                    \"\"\"\n                    document.getElementById(\"subtitle\").innerText = \"Hello from KMM!\";\n                    \"\"\".trimIndent(),\n                ) {\n                    // handle the result\n                }\n            },\n            modifier = Modifier.align(Alignment.BottomCenter).padding(bottom = 50.dp),\n        ) {\n            Text(jsRes)\n        }\n    }\n}\n</code></pre>"},{"location":"communication/#webview-to-native","title":"WebView to Native","text":"<p>Starting from version 1.8.0, this library provides a WebViewJsBridge  to allow developers to send messages from the WebView to Native.</p> <p>Developers can use the <code>WebViewJsBridge</code> to register a handler to handle the message from the WebView.</p> <pre><code>val jsBridge = rememberWebViewJsBridge()\n\nLaunchedEffect(jsBridge) {\n  jsBridge.register(GreetJsMessageHandler())\n}\n</code></pre> <p>The handler should implement the <code>IJsMessageHandler</code> interface.</p> <pre><code>interface IJsMessageHandler {\n  fun methodName(): String\n\n  fun canHandle(methodName: String) = methodName() == methodName\n\n  fun handle(\n    message: JsMessage,\n    callback: (String) -&gt; Unit,\n  )\n\n}\n\nclass GreetJsMessageHandler : IJsMessageHandler {\n  override fun methodName(): String {\n    return \"Greet\"\n  }\n\n  override fun handle(message: JsMessage, callback: (String) -&gt; Unit) {\n    Logger.i {\n      \"Greet Handler Get Message: $message\"\n    }\n    val param = processParams&lt;GreetModel&gt;(message)\n    val data = GreetModel(\"KMM Received ${param.message}\")\n    callback(dataToJsonString(data))\n  }\n}\n</code></pre> <p>Developers can use the <code>window.kmpJsBridge.callNative</code> to send a message to the Native. It receives three parameters:</p> <ul> <li>methodName: the name of the handler registered in the Native.</li> <li>params: the parameters to send to the Native. It needs to be a JSON string.</li> <li>callback: the callback function to handle the response from the Native. It receives a JSON string   as the parameter. Pass null if no callback is needed.</li> </ul> <pre><code>window.kmpJsBridge.callNative = function (methodName, params, callback) {}\n\nwindow.kmpJsBridge.callNative(\"Greet\",JSON.stringify({message:\"Hello\"}),\n  function (data) {\n    document.getElementById(\"subtitle\").innerText = data;\n    console.log(\"Greet from Native: \" + data);\n  }\n);\n</code></pre> <p>Note: Starting from version 1.8.6, the name of the JsBridge is configurable. Developers can configure it in the <code>rememberWebViewJsBridge</code> method. This library uses the <code>kmpJsBridge</code> as the default.</p>"},{"location":"installation/","title":"Installation","text":"<p>You can add this library to your project using Gradle.</p>"},{"location":"installation/#multiplatform","title":"Multiplatform","text":"<p>To add to a multiplatform project, add the dependency to the common source-set:</p> <pre><code>repositories {\n    mavenCentral()\n    // Desktop target has to add this repo\n    maven(\"https://jogamp.org/deployment/maven\")\n}\n\nkotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n              // use api since the desktop app need to access the Cef to initialize it.\n              api(\"io.github.kevinnzou:compose-webview-multiplatform:1.8.4\")\n            }\n        }\n    }\n}\n</code></pre> <p>Note:  If you want to use this library in a desktop app, you need to configure the KCEF for it. Please see the README.desktop.md  for detailed instructions.</p>"},{"location":"installation/#single-platform","title":"Single Platform","text":"<p>For an Android only project, you directly can use my another library. Add the dependency to app level <code>build.gradle.kts</code>:</p> <pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"io.github.KevinnZou:compose-webview:0.33.3\")\n}\n</code></pre>"},{"location":"interception/","title":"Request Interception","text":"<p>Starting from version 1.9.8, this library provides a <code>RequestInterceptor</code> to allow developers to intercept the request and modify the request headers. It only supports the Android and iOS platform for now.</p>"},{"location":"interception/#requestinterceptor","title":"RequestInterceptor","text":"<pre><code>/**\n * Interface for intercepting requests in WebView.\n */\ninterface RequestInterceptor {\n    fun onInterceptUrlRequest(\n        request: WebRequest,\n        navigator: WebViewNavigator,\n    ): WebRequestInterceptResult\n}\n</code></pre> <p>The <code>onInterceptUrlRequest</code> method will be called when the WebView sends a request.</p>"},{"location":"interception/#sample","title":"Sample","text":"<p>Developers can implement the <code>RequestInterceptor</code> interface to define their own interceptor. Then they can pass it to the <code>rememberWebViewNavigator</code> method to intercept the request.</p> <pre><code>val navigator =\n    rememberWebViewNavigator(\n        requestInterceptor =\n        object : RequestInterceptor {\n            override fun onInterceptUrlRequest(\n                request: WebRequest,\n                navigator: WebViewNavigator,\n            ): WebRequestInterceptResult {\n                return if (request.url.contains(\"kotlin\")) {\n                    WebRequestInterceptResult.Modify(\n                        WebRequest(\n                            url = \"https://kotlinlang.org/docs/multiplatform.html\",\n                            headers = mutableMapOf(\"info\" to \"test\"),\n                        ),\n                    )\n                } else {\n                    WebRequestInterceptResult.Allow\n                }\n            }\n        },\n    )\n</code></pre>"},{"location":"navigation/","title":"Navigation","text":"<p>This library provides a WebViewNavigator class  to control over the navigation of a WebView from outside the composable. </p> <p>E.g.for performing a back navigation in response to the user clicking the \"up\" button in a TopAppBar.</p> <p>It can be used to load a new URL, evaluate the JavaScript, and go back and forward in the history.</p>"},{"location":"navigation/#webviewnavigator","title":"WebViewNavigator","text":"<pre><code>class WebViewNavigator(private val coroutineScope: CoroutineScope) {\n\n    /**\n     * True when the web view is able to navigate backwards, false otherwise.\n     */\n    var canGoBack: Boolean by mutableStateOf(false)\n        internal set\n\n    /**\n     * True when the web view is able to navigate forwards, false otherwise.\n     */\n    var canGoForward: Boolean by mutableStateOf(false)\n        internal set\n\n    fun loadUrl(url: String, additionalHttpHeaders: Map&lt;String, String&gt; = emptyMap()) {}\n\n    fun loadHtml(\n        html: String,\n        baseUrl: String? = null,\n        mimeType: String? = null,\n        encoding: String? = \"utf-8\",\n        historyUrl: String? = null\n    ) {\n    }\n\n    fun postUrl(\n        url: String,\n        postData: ByteArray\n    ) {\n    }\n\n    fun evaluateJavaScript(script: String, callback: ((String) -&gt; Unit)? = null)\n\n    /**\n     * Navigates the webview back to the previous page.\n     */\n    fun navigateBack() {}\n\n    /**\n     * Navigates the webview forward after going back from a page.\n     */\n    fun navigateForward() {}\n\n    /**\n     * Reloads the current page in the webview.\n     */\n    fun reload() {}\n\n    /**\n     * Stops the current page load (if one is loading).\n     */\n    fun stopLoading() {}\n}\n</code></pre>"},{"location":"navigation/#creating-a-webviewnavigator","title":"Creating a WebViewNavigator","text":"<p>It can be created using the rememberWebViewNavigator function, which can be remembered across Compositions.</p> <pre><code>val navigator = rememberWebViewNavigator()\n\n@Composable\nfun rememberWebViewNavigator(\n    coroutineScope: CoroutineScope = rememberCoroutineScope()\n): WebViewNavigator = remember(coroutineScope) { WebViewNavigator(coroutineScope) }\n</code></pre>"},{"location":"navigation/#usage","title":"Usage","text":"<p>Developers can use the WebViewNavigator to control the navigation of the WebView.</p> <pre><code>val navigator = rememberWebViewNavigator()\n\nColumn {\n    val state = rememberWebViewState(\"https://example.com\")\n    val navigator = rememberWebViewNavigator()\n\n    TopAppBar(\n        title = { Text(text = \"WebView Sample\") },\n        navigationIcon = {\n            if (navigator.canGoBack) {\n                IconButton(onClick = { navigator.navigateBack() }) {\n                    Icon(\n                        imageVector = Icons.Default.ArrowBack,\n                        contentDescription = \"Back\"\n                    )\n                }\n            }\n        }\n    )\n    Text(text = \"${state.pageTitle}\")\n    val loadingState = state.loadingState\n    if (loadingState is LoadingState.Loading) {\n        LinearProgressIndicator(\n          progress = loadingState.progress,\n          modifier = Modifier.fillMaxWidth()\n        )\n    }\n  WebView(\n    state = state,\n    navigator = navigator\n  )\n}\n</code></pre>"},{"location":"setting/","title":"Setting","text":"<p>Starting from version 1.3.0, this library allows users to customize web settings.</p> <p>There are some common WebSettings  that can be shared across different platforms, such as <code>isJavaScriptEnabled</code> and <code>userAgent</code>.</p>"},{"location":"setting/#websettings","title":"WebSettings","text":"<pre><code>class WebSettings {\n  var isJavaScriptEnabled = true\n\n  var customUserAgentString: String? = null\n\n  /**\n     * Android platform specific settings\n     */\n    val androidWebSettings = PlatformWebSettings.AndroidWebSettings()\n\n    /**\n     * Desktop platform specific settings\n     */\n    val desktopWebSettings = PlatformWebSettings.DesktopWebSettings()\n\n    /**\n     * iOS platform specific settings\n     */\n    val iOSWebSettings = PlatformWebSettings.IOSWebSettings\n\n}\n</code></pre>"},{"location":"setting/#platformwebsettings","title":"PlatformWebSettings","text":"<p>For platform specific settings, this library provides the PlatformWebSettings.</p> <p>These settings will only be applied to the respective platforms and do not affect other platforms.</p> <pre><code>sealed class PlatformWebSettings {\n    data class AndroidWebSettings(\n        /**\n         * whether the WebView should support zooming using its on-screen zoom\n         * controls and gestures. The particular zoom mechanisms that should be used\n         * can be set with {@link #setBuiltInZoomControls}. This setting does not\n         * affect zooming performed using the {@link WebView#zoomIn()} and\n         * {@link WebView#zoomOut()} methods. The default is {@code true}.\n         *\n         * @param support whether the WebView should support zoom\n         */\n        var supportZoom: Boolean = true,\n\n        /**\n         * whether Safe Browsing is enabled. Safe Browsing allows WebView to\n         * protect against malware and phishing attacks by verifying the links.\n         */\n        var safeBrowsingEnabled: Boolean = true,\n\n        // .....\n    ) : PlatformWebSettings()\n\n    data class DesktopWebSettings(\n        var offScreenRendering: Boolean = false,\n        var transparent: Boolean = false,\n    ) : PlatformWebSettings()\n\n    data object IOSWebSettings : PlatformWebSettings()\n}\n</code></pre>"},{"location":"setting/#usage","title":"Usage","text":"<p>Developers can configure custom settings in the shared code in the following way:</p> <pre><code>val webViewState = rememberWebViewStateWithHTMLData(\n    data = html\n)\nDisposableEffect(Unit) {\n    webViewState.webSettings.apply {\n        isJavaScriptEnabled = true\n        androidWebSettings.apply {\n            isAlgorithmicDarkeningAllowed = true\n            safeBrowsingEnabled = true\n        }\n    }\n    onDispose { }\n}\n</code></pre>"},{"location":"state/","title":"State","text":"<p>This library provides a WebViewState class as a state holder to hold the state for the WebView.</p>"},{"location":"state/#webviewstate","title":"WebViewState","text":"<pre><code>class WebViewState(webContent: WebContent) {\n    var lastLoadedUrl: String? by mutableStateOf(null)\n        internal set\n\n    /**\n     *  The content being loaded by the WebView\n     */\n    var content: WebContent by mutableStateOf(webContent)\n\n    /**\n     * Whether the WebView is currently [LoadingState.Loading] data in its main frame (along with\n     * progress) or the data loading has [LoadingState.Finished]. See [LoadingState]\n     */\n    var loadingState: LoadingState by mutableStateOf(LoadingState.Initializing)\n        internal set\n\n    /**\n     * Whether the webview is currently loading data in its main frame\n     */\n    val isLoading: Boolean\n        get() = loadingState !is LoadingState.Finished\n\n    /**\n     * The title received from the loaded content of the current page\n     */\n    var pageTitle: String? by mutableStateOf(null)\n        internal set\n\n    /**\n     * A list for errors captured in the last load. Reset when a new page is loaded.\n     * Errors could be from any resource (iframe, image, etc.), not just for the main page.\n     * For more fine grained control use the OnError callback of the WebView.\n     */\n    val errorsForCurrentRequest: SnapshotStateList&lt;WebViewError&gt; = mutableStateListOf()\n\n    /**\n     * Custom Settings for WebView.\n     */\n    val webSettings: WebSettings by mutableStateOf(WebSettings())\n\n    // We need access to this in the state saver. An internal DisposableEffect or AndroidView\n    // onDestroy is called after the state saver and so can't be used.\n    internal var webView by mutableStateOf&lt;IWebView?&gt;(null)\n}\n</code></pre>"},{"location":"state/#rememberwebviewstate","title":"rememberWebViewState","text":"<p>It can be created using the rememberWebViewState function, which can be remembered across Compositions.</p> <pre><code>val state = rememberWebViewState(\"https://github.com/KevinnZou/compose-webview-multiplatform\")\n\n/**\n * Creates a WebView state that is remembered across Compositions.\n *\n * @param url The url to load in the WebView\n * @param additionalHttpHeaders Optional, additional HTTP headers that are passed to [WebView.loadUrl].\n *                              Note that these headers are used for all subsequent requests of the WebView.\n */\n@Composable\nfun rememberWebViewState(\n    url: String,\n    additionalHttpHeaders: Map&lt;String, String&gt; = emptyMap()\n)\n\n/**\n * Creates a WebView state that is remembered across Compositions.\n *\n * @param data The uri to load in the WebView\n * @param baseUrl The URL to use as the page's base URL.\n * @param encoding The encoding of the data in the string.\n * @param mimeType The MIME type of the data in the string.\n * @param historyUrl The history URL for the loaded HTML. Leave null to use about:blank.\n */\n@Composable\nfun rememberWebViewStateWithHTMLData(\n    data: String,\n    baseUrl: String? = null,\n    encoding: String = \"utf-8\",\n    mimeType: String? = null,\n    historyUrl: String? = null\n)\n\n/**\n * Creates a WebView state that is remembered across Compositions.\n *\n * @param fileName The file to load in the WebView\n */\n@Composable\nfun rememberWebViewStateWithHTMLFile(\n    fileName: String,\n)\n</code></pre>"},{"location":"state/#remembersaveablewebviewstate","title":"rememberSaveableWebViewState","text":"<p>This library also provides a <code>rememberSaveableWebViewState</code> function that can be used to create a <code>WebViewState</code> that is remembered across recompositions.</p> <p>It can be used in tab layouts, where the state of the WebView should be saved when the user switches between tabs.</p> <pre><code>@Composable\nfun Home() {\n    val url = \"https://www.jetbrains.com/lp/compose-multiplatform/\"\n    val webViewState =\n        rememberSaveableWebViewState(url).apply {\n            webSettings.logSeverity = KLogSeverity.Debug\n        }\n\n    val navigator = rememberWebViewNavigator()\n\n    LaunchedEffect(navigator) {\n        val bundle = webViewState.viewState\n        if (bundle == null) {\n            // This is the first time load, so load the home page.\n            navigator.loadUrl(url)\n        }\n    }\n\n    WebView(\n        state = webViewState,\n        modifier = Modifier.fillMaxSize().padding(bottom = 45.dp),\n        navigator = navigator,\n    )\n}\n</code></pre> <p>Please refer to the VoyagerNavigationSample for whole example.</p>"},{"location":"state/#usage","title":"Usage","text":"<p>Developers can use the <code>WebViewState</code> to get the loading information of the WebView, such as the loading progress, the loading status, and the URL of the current page.</p> <pre><code>Column {\n    val state = rememberWebViewState(\"https://github.com/KevinnZou/compose-webview-multiplatform\")\n\n    Text(text = \"${state.pageTitle}\")\n    val loadingState = state.loadingState\n    if (loadingState is LoadingState.Loading) {\n        LinearProgressIndicator(\n            progress = loadingState.progress,\n            modifier = Modifier.fillMaxWidth()\n        )\n    }\n    WebView(\n        state\n    )\n}\n</code></pre>"},{"location":"usage/","title":"Basic Usage","text":""},{"location":"usage/#loading-urls","title":"Loading URLs","text":"<p>To use this widget there are two key APIs that are needed: WebView, which provides the layout, and rememberWebViewState(url) which provides some remembered state including the URL to display.</p> <p>The basic usage is as follows:</p> <pre><code>val state = rememberWebViewState(\"https://example.com\")\n\nWebView(state)\n</code></pre> <p>This will display a WebView in your Compose layout that shows the URL provided.</p>"},{"location":"usage/#loading-html","title":"Loading HTML","text":"<p>This library supports loading HTML data and HTML files.</p>"},{"location":"usage/#html-data","title":"HTML Data","text":"<p>Developers can load HTML data in the following way:</p> <pre><code>val html = \"\"\"\n    &lt;html&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Hello World&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n\"\"\".trimIndent()\n\nval webViewState = rememberWebViewStateWithHTMLData(\n    data = html\n)\n\nWebView(state)\n</code></pre>"},{"location":"usage/#html-file","title":"HTML File","text":"<p>Developers can load HTML files in the following way:</p> <pre><code>val webViewState = rememberWebViewStateWithHTMLFile(\n    fileName = \"index.html\"\n)\n\nWebView(state)\n</code></pre> <p>Note that the HTML file should be put in the <code>resources/assets</code> folder of the shared module.</p> <p>It also supports external resources such as images, CSS, and JavaScript files on Android and iOS. Desktop support is coming soon.</p>"},{"location":"usage/#sample","title":"Sample","text":"<p>A more complete sample is available in the BasicWebViewSample</p> <pre><code>@Composable\ninternal fun BasicWebViewSample() {\n    val initialUrl = \"https://github.com/KevinnZou/compose-webview-multiplatform\"\n    val state = rememberWebViewState(url = initialUrl)\n    LaunchedEffect(Unit) {\n        state.webSettings.apply {\n            logSeverity = KLogSeverity.Debug\n            customUserAgentString =\n                \"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1) AppleWebKit/625.20 (KHTML, like Gecko) Version/14.3.43 Safari/625.20\"\n        }\n    }\n    val navigator = rememberWebViewNavigator()\n    var textFieldValue by remember(state.lastLoadedUrl) {\n        mutableStateOf(state.lastLoadedUrl)\n    }\n    MaterialTheme {\n        Column {\n            TopAppBar(\n                title = { Text(text = \"WebView Sample\") },\n                navigationIcon = {\n                    if (navigator.canGoBack) {\n                        IconButton(onClick = { navigator.navigateBack() }) {\n                            Icon(\n                                imageVector = Icons.Default.ArrowBack,\n                                contentDescription = \"Back\",\n                            )\n                        }\n                    }\n                },\n            )\n\n            Row {\n                Box(modifier = Modifier.weight(1f)) {\n                    if (state.errorsForCurrentRequest.isNotEmpty()) {\n                        Image(\n                            imageVector = Icons.Default.Close,\n                            contentDescription = \"Error\",\n                            colorFilter = ColorFilter.tint(Color.Red),\n                            modifier =\n                                Modifier\n                                    .align(Alignment.CenterEnd)\n                                    .padding(8.dp),\n                        )\n                    }\n\n                    OutlinedTextField(\n                        value = textFieldValue ?: \"\",\n                        onValueChange = { textFieldValue = it },\n                        modifier = Modifier.fillMaxWidth(),\n                    )\n                }\n\n                Button(\n                    onClick = {\n                        textFieldValue?.let {\n                            navigator.loadUrl(it)\n                        }\n                    },\n                    modifier = Modifier.align(Alignment.CenterVertically),\n                ) {\n                    Text(\"Go\")\n                }\n            }\n\n            val loadingState = state.loadingState\n            if (loadingState is LoadingState.Loading) {\n                LinearProgressIndicator(\n                    progress = loadingState.progress,\n                    modifier = Modifier.fillMaxWidth(),\n                )\n            }\n\n            WebView(\n                state = state,\n                modifier =\n                    Modifier\n                        .fillMaxSize(),\n                navigator = navigator,\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"webview/","title":"WebView","text":"<p>This library provides a WebView  composable that can be used in your Compose UI to display web content.</p> <pre><code>/**\n *\n * A wrapper around the Android View WebView to provide a basic WebView composable.\n *\n * @param state The webview state holder where the Uri to load is defined.\n * @param modifier A compose modifier\n * @param captureBackPresses Set to true to have this Composable capture back presses and navigate\n * the WebView back.\n * @param navigator An optional navigator object that can be used to control the WebView's\n * navigation from outside the composable.\n * @param onCreated Called when the WebView is first created.\n * @param onDispose Called when the WebView is destroyed.\n * @sample sample.BasicWebViewSample\n */\n@Composable\nfun WebView(\n    state: WebViewState,\n    modifier: Modifier = Modifier,\n    captureBackPresses: Boolean = true,\n    navigator: WebViewNavigator = rememberWebViewNavigator(),\n    onCreated: () -&gt; Unit = {},\n    onDispose: () -&gt; Unit = {},\n)\n</code></pre>"}]}